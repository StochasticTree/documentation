"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2092],{5200:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"r-documentation-markdown/RandomEffectSamples","title":"RandomEffectSamples","description":"Description","source":"@site/docs/r-documentation-markdown/RandomEffectSamples.md","sourceDirName":"r-documentation-markdown","slug":"/r-documentation-markdown/RandomEffectSamples","permalink":"/documentation/docs/r-documentation-markdown/RandomEffectSamples","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/r-documentation-markdown/RandomEffectSamples.md","tags":[],"version":"current","frontMatter":{"title":"RandomEffectSamples"},"sidebar":"tutorialSidebar","previous":{"title":"Outcome","permalink":"/documentation/docs/r-documentation-markdown/Outcome"},"next":{"title":"RandomEffectsDataset","permalink":"/documentation/docs/r-documentation-markdown/RandomEffectsDataset"}}');var o=r(4848),d=r(8453);const a={title:"RandomEffectSamples"},l='Class that wraps the "persistent" aspects of a C++ random effects model',i={},c=[{value:"Description",id:"description",level:2},{value:"Public fields",id:"public-fields",level:2},{value:"Methods",id:"methods",level:2},{value:"Public methods",id:"public-methods",level:3},{value:"Method <code>new()</code>",id:"method-new",level:3},{value:"Usage",id:"usage",level:4},{value:"Returns",id:"returns",level:4},{value:"Method <code>load_in_session()</code>",id:"method-load_in_session",level:3},{value:"Usage",id:"usage-1",level:4},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Method <code>load_from_json()</code>",id:"method-load_from_json",level:3},{value:"Usage",id:"usage-2",level:4},{value:"Arguments",id:"arguments-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Method <code>append_from_json()</code>",id:"method-append_from_json",level:3},{value:"Usage",id:"usage-3",level:4},{value:"Arguments",id:"arguments-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Method <code>load_from_json_string()</code>",id:"method-load_from_json_string",level:3},{value:"Usage",id:"usage-4",level:4},{value:"Arguments",id:"arguments-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Method <code>append_from_json_string()</code>",id:"method-append_from_json_string",level:3},{value:"Usage",id:"usage-5",level:4},{value:"Arguments",id:"arguments-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Method <code>predict()</code>",id:"method-predict",level:3},{value:"Usage",id:"usage-6",level:4},{value:"Arguments",id:"arguments-5",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Method <code>extract_parameter_samples()</code>",id:"method-extract_parameter_samples",level:3},{value:"Usage",id:"usage-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Method <code>extract_label_mapping()</code>",id:"method-extract_label_mapping",level:3},{value:"Usage",id:"usage-8",level:4},{value:"Returns",id:"returns-8",level:4}];function t(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"class-that-wraps-the-persistent-aspects-of-a-c-random-effects-model",children:'Class that wraps the "persistent" aspects of a C++ random effects model'})}),"\n",(0,o.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"Coordinates various C++ random effects classes and persists those\nneeded for prediction / serialization"}),"\n",(0,o.jsx)(n.h2,{id:"public-fields",children:"Public fields"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"rfx_container_ptr"}),": External pointer to a C++ StochTree::RandomEffectsContainer class"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"label_mapper_ptr"}),": External pointer to a C++ StochTree::LabelMapper class"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"training_group_ids"}),": Unique vector of group IDs that were in the training dataset"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(n.h3,{id:"public-methods",children:"Public methods"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#method-RandomEffectSamples-new",children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$new()"})})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#method-RandomEffectSamples-load_in_session",children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$load_in_session()"})})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#method-RandomEffectSamples-load_from_json",children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$load_from_json()"})})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#method-RandomEffectSamples-append_from_json",children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$append_from_json()"})})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#method-RandomEffectSamples-load_from_json_string",children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$load_from_json_string()"})})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#method-RandomEffectSamples-append_from_json_string",children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$append_from_json_string()"})})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#method-RandomEffectSamples-predict",children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$predict()"})})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#method-RandomEffectSamples-extract_parameter_samples",children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$extract_parameter_samples()"})})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#method-RandomEffectSamples-extract_label_mapping",children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$extract_label_mapping()"})})}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"method-new",children:["Method ",(0,o.jsx)(n.code,{children:"new()"})]}),"\n",(0,o.jsx)(n.p,{children:"Create a new RandomEffectSamples object."}),"\n",(0,o.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$new()\n"})}),"\n",(0,o.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:["A new ",(0,o.jsx)(n.code,{children:"RandomEffectSamples"})," object."]}),"\n",(0,o.jsxs)(n.h3,{id:"method-load_in_session",children:["Method ",(0,o.jsx)(n.code,{children:"load_in_session()"})]}),"\n",(0,o.jsx)(n.p,{children:'Construct RandomEffectSamples object from other "in-session" R objects'}),"\n",(0,o.jsx)(n.h4,{id:"usage-1",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$load_in_session(\n  num_components,\n  num_groups,\n  random_effects_tracker\n)\n"})}),"\n",(0,o.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"num_components"}),': Number of "components" or bases defining the random effects regression']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"num_groups"}),": Number of random effects groups"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"random_effects_tracker"}),": Object of type ",(0,o.jsx)(n.code,{children:"RandomEffectsTracker"})]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"NULL"}),"\n",(0,o.jsxs)(n.h3,{id:"method-load_from_json",children:["Method ",(0,o.jsx)(n.code,{children:"load_from_json()"})]}),"\n",(0,o.jsx)(n.p,{children:"Construct RandomEffectSamples object from a json object"}),"\n",(0,o.jsx)(n.h4,{id:"usage-2",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$load_from_json(\n  json_object,\n  json_rfx_container_label,\n  json_rfx_mapper_label,\n  json_rfx_groupids_label\n)\n"})}),"\n",(0,o.jsx)(n.h4,{id:"arguments-1",children:"Arguments"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_object"}),": Object of class ",(0,o.jsx)(n.code,{children:"CppJson"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_rfx_container_label"}),': Label referring to a particular rfx sample container (i.e. "random_effect_container_0") in the overall json hierarchy']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_rfx_mapper_label"}),': Label referring to a particular rfx label mapper (i.e. "random_effect_label_mapper_0") in the overall json hierarchy']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_rfx_groupids_label"}),': Label referring to a particular set of rfx group IDs (i.e. "random_effect_groupids_0") in the overall json hierarchy']}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:["A new ",(0,o.jsx)(n.code,{children:"RandomEffectSamples"})," object."]}),"\n",(0,o.jsxs)(n.h3,{id:"method-append_from_json",children:["Method ",(0,o.jsx)(n.code,{children:"append_from_json()"})]}),"\n",(0,o.jsxs)(n.p,{children:["Append random effect draws to ",(0,o.jsx)(n.code,{children:"RandomEffectSamples"})," object from a json object"]}),"\n",(0,o.jsx)(n.h4,{id:"usage-3",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$append_from_json(\n  json_object,\n  json_rfx_container_label,\n  json_rfx_mapper_label,\n  json_rfx_groupids_label\n)\n"})}),"\n",(0,o.jsx)(n.h4,{id:"arguments-2",children:"Arguments"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_object"}),": Object of class ",(0,o.jsx)(n.code,{children:"CppJson"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_rfx_container_label"}),': Label referring to a particular rfx sample container (i.e. "random_effect_container_0") in the overall json hierarchy']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_rfx_mapper_label"}),': Label referring to a particular rfx label mapper (i.e. "random_effect_label_mapper_0") in the overall json hierarchy']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_rfx_groupids_label"}),': Label referring to a particular set of rfx group IDs (i.e. "random_effect_groupids_0") in the overall json hierarchy']}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"NULL (updates object in-place)"}),"\n",(0,o.jsxs)(n.h3,{id:"method-load_from_json_string",children:["Method ",(0,o.jsx)(n.code,{children:"load_from_json_string()"})]}),"\n",(0,o.jsx)(n.p,{children:"Construct RandomEffectSamples object from a json object"}),"\n",(0,o.jsx)(n.h4,{id:"usage-4",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$load_from_json_string(\n  json_string,\n  json_rfx_container_label,\n  json_rfx_mapper_label,\n  json_rfx_groupids_label\n)\n"})}),"\n",(0,o.jsx)(n.h4,{id:"arguments-3",children:"Arguments"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_string"}),": JSON string which parses into object of class ",(0,o.jsx)(n.code,{children:"CppJson"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_rfx_container_label"}),': Label referring to a particular rfx sample container (i.e. "random_effect_container_0") in the overall json hierarchy']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_rfx_mapper_label"}),': Label referring to a particular rfx label mapper (i.e. "random_effect_label_mapper_0") in the overall json hierarchy']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_rfx_groupids_label"}),': Label referring to a particular set of rfx group IDs (i.e. "random_effect_groupids_0") in the overall json hierarchy']}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:["A new ",(0,o.jsx)(n.code,{children:"RandomEffectSamples"})," object."]}),"\n",(0,o.jsxs)(n.h3,{id:"method-append_from_json_string",children:["Method ",(0,o.jsx)(n.code,{children:"append_from_json_string()"})]}),"\n",(0,o.jsxs)(n.p,{children:["Append random effect draws to ",(0,o.jsx)(n.code,{children:"RandomEffectSamples"})," object from a json object"]}),"\n",(0,o.jsx)(n.h4,{id:"usage-5",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$append_from_json_string(\n  json_string,\n  json_rfx_container_label,\n  json_rfx_mapper_label,\n  json_rfx_groupids_label\n)\n"})}),"\n",(0,o.jsx)(n.h4,{id:"arguments-4",children:"Arguments"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_string"}),": JSON string which parses into object of class ",(0,o.jsx)(n.code,{children:"CppJson"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_rfx_container_label"}),': Label referring to a particular rfx sample container (i.e. "random_effect_container_0") in the overall json hierarchy']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_rfx_mapper_label"}),': Label referring to a particular rfx label mapper (i.e. "random_effect_label_mapper_0") in the overall json hierarchy']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"json_rfx_groupids_label"}),': Label referring to a particular set of rfx group IDs (i.e. "random_effect_groupids_0") in the overall json hierarchy']}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"NULL (updates object in-place)"}),"\n",(0,o.jsxs)(n.h3,{id:"method-predict",children:["Method ",(0,o.jsx)(n.code,{children:"predict()"})]}),"\n",(0,o.jsxs)(n.p,{children:["Predict random effects for each observation implied by ",(0,o.jsx)(n.code,{children:"rfx_group_ids"})," and ",(0,o.jsx)(n.code,{children:"rfx_basis"}),'.\nIf a random effects model is "intercept-only" the ',(0,o.jsx)(n.code,{children:"rfx_basis"})," will be a vector of ones of size ",(0,o.jsx)(n.code,{children:"length(rfx_group_ids)"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"usage-6",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$predict(rfx_group_ids, rfx_basis = NULL)\n"})}),"\n",(0,o.jsx)(n.h4,{id:"arguments-5",children:"Arguments"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"rfx_group_ids"}),": Indices of random effects groups in a prediction set"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"rfx_basis"}),": (Optional ) Basis used for random effects prediction"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"Matrix with as many rows as observations provided and as many columns as samples drawn of the model."}),"\n",(0,o.jsxs)(n.h3,{id:"method-extract_parameter_samples",children:["Method ",(0,o.jsx)(n.code,{children:"extract_parameter_samples()"})]}),"\n",(0,o.jsx)(n.p,{children:'Extract the random effects parameters sampled. With the "redundant parameterization"\nof Gelman et al (2008), this includes four parameters: alpha (the "working parameter"\nshared across every group), xi (the "group parameter" sampled separately for each group),\nbeta (the product of alpha and xi, which corresponds to the overall group-level random effects),\nand sigma (group-independent prior variance for each component of xi).'}),"\n",(0,o.jsx)(n.h4,{id:"usage-7",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$extract_parameter_samples()\n"})}),"\n",(0,o.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:["List of arrays. The alpha array has dimension (",(0,o.jsx)(n.code,{children:"num_components"}),", ",(0,o.jsx)(n.code,{children:"num_samples"}),") and is simply a vector if ",(0,o.jsx)(n.code,{children:"num_components = 1"}),".\nThe xi and beta arrays have dimension (",(0,o.jsx)(n.code,{children:"num_components"}),", ",(0,o.jsx)(n.code,{children:"num_groups"}),", ",(0,o.jsx)(n.code,{children:"num_samples"}),") and is simply a matrix if ",(0,o.jsx)(n.code,{children:"num_components = 1"}),".\nThe sigma array has dimension (",(0,o.jsx)(n.code,{children:"num_components"}),", ",(0,o.jsx)(n.code,{children:"num_samples"}),") and is simply a vector if ",(0,o.jsx)(n.code,{children:"num_components = 1"}),"."]}),"\n",(0,o.jsxs)(n.h3,{id:"method-extract_label_mapping",children:["Method ",(0,o.jsx)(n.code,{children:"extract_label_mapping()"})]}),"\n",(0,o.jsx)(n.p,{children:"Convert the mapping of group IDs to random effect components indices from C++ to R native format"}),"\n",(0,o.jsx)(n.h4,{id:"usage-8",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"RandomEffectSamples$extract_label_mapping()\n"})}),"\n",(0,o.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,o.jsx)(n.p,{children:"List mapping group ID to random effect components."})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var s=r(6540);const o={},d=s.createContext(o);function a(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);