"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6982],{4509:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"r-documentation-markdown/computeMaxLeafIndex","title":"computeMaxLeafIndex","description":"Description","source":"@site/docs/r-documentation-markdown/computeMaxLeafIndex.md","sourceDirName":"r-documentation-markdown","slug":"/r-documentation-markdown/computeMaxLeafIndex","permalink":"/documentation/docs/r-documentation-markdown/computeMaxLeafIndex","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/r-documentation-markdown/computeMaxLeafIndex.md","tags":[],"version":"current","frontMatter":{"title":"computeMaxLeafIndex"},"sidebar":"tutorialSidebar","previous":{"title":"computeForestLeafVariances","permalink":"/documentation/docs/r-documentation-markdown/computeForestLeafVariances"},"next":{"title":"convertBARTModelToJson","permalink":"/documentation/docs/r-documentation-markdown/convertBARTModelToJson"}}');var s=t(4848),r=t(8453);const i={title:"computeMaxLeafIndex"},a="Compute and return the largest possible leaf index computable by",c={},d=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Value",id:"value",level:2}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"compute-and-return-the-largest-possible-leaf-index-computable-by",children:"Compute and return the largest possible leaf index computable by"})}),"\n",(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["Compute and return the largest possible leaf index computable by ",(0,s.jsx)(n.code,{children:"computeForestLeafIndices"})," for the forests in a designated forest sample container."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-r",children:"computeMaxLeafIndex(model_object, covariates, forest_type, forest_inds = NULL)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"model_object"}),": Object of type ",(0,s.jsx)(n.code,{children:"bartmodel"})," or ",(0,s.jsx)(n.code,{children:"bcf"})," corresponding to a BART / BCF model with at least one forest sample"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"covariates"}),": Covariates to use for prediction. Must have the same dimensions / column types as the data used to train a forest."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"forest_type"}),": Which forest to use from ",(0,s.jsx)(n.code,{children:"model_object"}),".\nValid inputs depend on the model type, and whether or not a",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"1. BART"})})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'mean'"}),": Extracts leaf indices for the mean forest"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'variance'"}),": Extracts leaf indices for the variance forest",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"2. BCF"})})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'prognostic'"}),": Extracts leaf indices for the prognostic forest"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'treatment'"}),": Extracts leaf indices for the treatment effect forest"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'variance'"}),": Extracts leaf indices for the variance forest"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"forest_inds"}),": (Optional) Indices of the forest sample(s) for which to compute leaf indices. If not provided,\nthis function will return leaf indices for every sample of a forest.\nThis function uses 1-indexing, so the first forest sample corresponds to ",(0,s.jsx)(n.code,{children:"forest_num = 1"}),", and so on."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"value",children:"Value"}),"\n",(0,s.jsxs)(n.p,{children:["Vector containing the largest possible leaf index computable by ",(0,s.jsx)(n.code,{children:"computeForestLeafIndices"})," for the forests in a designated forest sample container."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);