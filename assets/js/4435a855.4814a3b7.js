"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7614],{4387:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"r-documentation-markdown/computeForestLeafIndices","title":"computeForestLeafIndices","description":"Description","source":"@site/docs/r-documentation-markdown/computeForestLeafIndices.md","sourceDirName":"r-documentation-markdown","slug":"/r-documentation-markdown/computeForestLeafIndices","permalink":"/documentation/docs/r-documentation-markdown/computeForestLeafIndices","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/r-documentation-markdown/computeForestLeafIndices.md","tags":[],"version":"current","frontMatter":{"title":"computeForestLeafIndices"},"sidebar":"tutorialSidebar","previous":{"title":"calibrate_inverse_gamma_error_variance","permalink":"/documentation/docs/r-documentation-markdown/calibrate_inverse_gamma_error_variance"},"next":{"title":"computeForestLeafVariances","permalink":"/documentation/docs/r-documentation-markdown/computeForestLeafVariances"}}');var s=t(4848),r=t(8453);const i={title:"computeForestLeafIndices"},c="Compute vector of forest leaf indices",a={},d=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Value",id:"value",level:2}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"compute-vector-of-forest-leaf-indices",children:"Compute vector of forest leaf indices"})}),"\n",(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:['Compute and return a vector representation of a forest\'s leaf predictions for\nevery observation in a dataset.\nThe vector has a "row-major" format that can be easily re-represented as\nas a CSR sparse matrix: elements are organized so that the first ',(0,s.jsx)(n.code,{children:"n"})," elements\ncorrespond to leaf predictions for all ",(0,s.jsx)(n.code,{children:"n"})," observations in a dataset for the\nfirst tree in an ensemble, the next ",(0,s.jsx)(n.code,{children:"n"}),' elements correspond to predictions for\nthe second tree and so on. The "data" for each element corresponds to a uniquely\nmapped column index that corresponds to a single leaf of a single tree (i.e.\nif tree 1 has 3 leaves, its column indices range from 0 to 2, and then tree 2\'s\nleaf indices begin at 3, etc...).']}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-r",children:"computeForestLeafIndices(\n  model_object,\n  covariates,\n  forest_type,\n  forest_inds = NULL\n)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"model_object"}),": Object of type ",(0,s.jsx)(n.code,{children:"bartmodel"})," or ",(0,s.jsx)(n.code,{children:"bcf"})," corresponding to a BART / BCF model with at least one forest sample"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"covariates"}),": Covariates to use for prediction. Must have the same dimensions / column types as the data used to train a forest."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"forest_type"}),": Which forest to use from ",(0,s.jsx)(n.code,{children:"model_object"}),".\nValid inputs depend on the model type, and whether or not a given forest was sampled in that model.",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"1. BART"})})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'mean'"}),": Extracts leaf indices for the mean forest"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'variance'"}),": Extracts leaf indices for the variance forest",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"2. BCF"})})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'prognostic'"}),": Extracts leaf indices for the prognostic forest"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'treatment'"}),": Extracts leaf indices for the treatment effect forest"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"'variance'"}),": Extracts leaf indices for the variance forest"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"forest_inds"}),": (Optional) Indices of the forest sample(s) for which to compute leaf indices. If not provided,\nthis function will return leaf indices for every sample of a forest.\nThis function uses 1-indexing, so the first forest sample corresponds to ",(0,s.jsx)(n.code,{children:"forest_num = 1"}),", and so on."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"value",children:"Value"}),"\n",(0,s.jsxs)(n.p,{children:["List of vectors. Each vector is of size ",(0,s.jsx)(n.code,{children:"num_obs * num_trees"}),", where ",(0,s.jsx)(n.code,{children:"num_obs = nrow(covariates)"}),"and ",(0,s.jsx)(n.code,{children:"num_trees"})," is the number of trees in the relevant forest of ",(0,s.jsx)(n.code,{children:"model_object"}),"."]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);