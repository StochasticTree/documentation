"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9246],{7561:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"r-documentation-markdown/loadForestContainerCombinedJson","title":"loadForestContainerCombinedJson","description":"Description","source":"@site/docs/r-documentation-markdown/loadForestContainerCombinedJson.md","sourceDirName":"r-documentation-markdown","slug":"/r-documentation-markdown/loadForestContainerCombinedJson","permalink":"/documentation/docs/r-documentation-markdown/loadForestContainerCombinedJson","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/r-documentation-markdown/loadForestContainerCombinedJson.md","tags":[],"version":"current","frontMatter":{"title":"loadForestContainerCombinedJson"},"sidebar":"tutorialSidebar","previous":{"title":"getRandomEffectSamples","permalink":"/documentation/docs/r-documentation-markdown/getRandomEffectSamples"},"next":{"title":"loadForestContainerCombinedJsonString","permalink":"/documentation/docs/r-documentation-markdown/loadForestContainerCombinedJsonString"}}');var s=o(4848),i=o(8453);const r={title:"loadForestContainerCombinedJson"},a="Combine multiple JSON model objects containing forests (with the same hierarchy / schema) into a single forest_container",c={},d=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Value",id:"value",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"combine-multiple-json-model-objects-containing-forests-with-the-same-hierarchy--schema-into-a-single-forest_container",children:"Combine multiple JSON model objects containing forests (with the same hierarchy / schema) into a single forest_container"})}),"\n",(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"Combine multiple JSON model objects containing forests (with the same hierarchy / schema) into a single forest_container"}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-r",children:"loadForestContainerCombinedJson(json_object_list, json_forest_label)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"json_object_list"}),": List of objects of class ",(0,s.jsx)(n.code,{children:"CppJson"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"json_forest_label"}),': Label referring to a particular forest (i.e. "forest_0") in the overall json hierarchy (must exist in every json object in the list)']}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"value",children:"Value"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ForestSamples"})," object"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>a});var t=o(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);