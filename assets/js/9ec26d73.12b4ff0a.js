"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9746],{3112:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>f,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"r-documentation-markdown/computeForestLeafVariances","title":"computeForestLeafVariances","description":"Description","source":"@site/docs/r-documentation-markdown/computeForestLeafVariances.md","sourceDirName":"r-documentation-markdown","slug":"/r-documentation-markdown/computeForestLeafVariances","permalink":"/documentation/docs/r-documentation-markdown/computeForestLeafVariances","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/r-documentation-markdown/computeForestLeafVariances.md","tags":[],"version":"current","frontMatter":{"title":"computeForestLeafVariances"},"sidebar":"tutorialSidebar","previous":{"title":"computeForestLeafIndices","permalink":"/documentation/docs/r-documentation-markdown/computeForestLeafIndices"},"next":{"title":"computeMaxLeafIndex","permalink":"/documentation/docs/r-documentation-markdown/computeMaxLeafIndex"}}');var r=n(4848),s=n(8453);const a={title:"computeForestLeafVariances"},c="Compute vector of forest leaf scale parameters",i={},d=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Value",id:"value",level:2}];function l(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"compute-vector-of-forest-leaf-scale-parameters",children:"Compute vector of forest leaf scale parameters"})}),"\n",(0,r.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(t.p,{children:"Return each forest's leaf node scale parameters.\nIf leaf scale is not sampled for the forest in question, throws an error that the\nleaf model does not have a stochastic scale parameter."}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-r",children:"computeForestLeafVariances(model_object, forest_type, forest_inds = NULL)\n"})}),"\n",(0,r.jsx)(t.h2,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"model_object"}),": Object of type ",(0,r.jsx)(t.code,{children:"bartmodel"})," or ",(0,r.jsx)(t.code,{children:"bcf"})," corresponding to a BART / BCF model with at least one forest sample"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"forest_type"}),": Which forest to use from ",(0,r.jsx)(t.code,{children:"model_object"}),".\nValid inputs depend on the model type, and whether or not a given forest was sampled in that model.",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"1. BART"})})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'mean'"}),": Extracts leaf indices for the mean forest"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'variance'"}),": Extracts leaf indices for the variance forest",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"2. BCF"})})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'prognostic'"}),": Extracts leaf indices for the prognostic forest"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'treatment'"}),": Extracts leaf indices for the treatment effect forest"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"'variance'"}),": Extracts leaf indices for the variance forest"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"forest_inds"}),": (Optional) Indices of the forest sample(s) for which to compute leaf indices. If not provided,\nthis function will return leaf indices for every sample of a forest.\nThis function uses 1-indexing, so the first forest sample corresponds to ",(0,r.jsx)(t.code,{children:"forest_num = 1"}),", and so on."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"value",children:"Value"}),"\n",(0,r.jsxs)(t.p,{children:["Vector of size ",(0,r.jsx)(t.code,{children:"length(forest_inds)"})," with the leaf scale parameter for each requested forest."]})]})}function f(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var o=n(6540);const r={},s=o.createContext(r);function a(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);