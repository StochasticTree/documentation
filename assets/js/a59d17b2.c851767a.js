"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4350],{3121:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"r-documentation-markdown/predict.bcf","title":"predict.bcf","description":"Description","source":"@site/docs/r-documentation-markdown/predict.bcf.md","sourceDirName":"r-documentation-markdown","slug":"/r-documentation-markdown/predict.bcf","permalink":"/documentation/docs/r-documentation-markdown/predict.bcf","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/r-documentation-markdown/predict.bcf.md","tags":[],"version":"current","frontMatter":{"title":"predict.bcf"},"sidebar":"tutorialSidebar","previous":{"title":"predict.bartmodel","permalink":"/documentation/docs/r-documentation-markdown/predict.bartmodel"},"next":{"title":"preprocessBartParams","permalink":"/documentation/docs/r-documentation-markdown/preprocessBartParams"}}');var s=t(4848),i=t(8453);const a={title:"predict.bcf"},o="Predict from a sampled BCF model on new data",d={},c=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Value",id:"value",level:2},{value:"Examples",id:"examples",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"predict-from-a-sampled-bcf-model-on-new-data",children:"Predict from a sampled BCF model on new data"})}),"\n",(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"Predict from a sampled BCF model on new data"}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-r",children:"# S3 method for bcf\npredict(\n  bcf,\n  X_test,\n  Z_test,\n  pi_test = NULL,\n  group_ids_test = NULL,\n  rfx_basis_test = NULL\n)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bcf"}),": Object of type ",(0,s.jsx)(n.code,{children:"bcf"})," containing draws of a Bayesian causal forest model and associated sampling outputs."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"X_test"}),": Covariates used to determine tree leaf predictions for each observation. Must be passed as a matrix or dataframe."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Z_test"}),": Treatments used for prediction."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pi_test"}),": (Optional) Propensities used for prediction."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"group_ids_test"}),": (Optional) Test set group labels used for an additive random effects model.\nWe do not currently support (but plan to in the near future), test set evaluation for group labels\nthat were not in the training set."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rfx_basis_test"}),': (Optional) Test set basis for "random-slope" regression in additive random effects model.']}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"value",children:"Value"}),"\n",(0,s.jsxs)(n.p,{children:["List of 3-5 ",(0,s.jsx)(n.code,{children:"nrow(X_test)"})," by ",(0,s.jsx)(n.code,{children:"bcf$num_samples"})," matrices: prognostic function estimates, treatment effect estimates, (optionally) random effects predictions, (optionally) variance forest predictions, and outcome predictions."]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-r",children:'n \\<- 500\nx1 \\<- rnorm(n)\nx2 \\<- rnorm(n)\nx3 \\<- rnorm(n)\nx4 \\<- as.numeric(rbinom(n,1,0.5))\nx5 \\<- as.numeric(sample(1:3,n,replace=TRUE))\nX \\<- cbind(x1,x2,x3,x4,x5)\np \\<- ncol(X)\ng \\<- function(x) \\{ifelse(x[,5]==1,2,ifelse(x[,5]==2,-1,4))\\}\nmu1 \\<- function(x) \\{1+g(x)+x[,1]*x[,3]\\}\nmu2 \\<- function(x) \\{1+g(x)+6*abs(x[,3]-1)\\}\ntau1 \\<- function(x) \\{rep(3,nrow(x))\\}\ntau2 \\<- function(x) \\{1+2*x[,2]*x[,4]\\}\nmu_x \\<- mu1(X)\ntau_x \\<- tau2(X)\npi_x \\<- 0.8*pnorm((3*mu_x/sd(mu_x)) - 0.5*X[,1]) + 0.05 + runif(n)/10\nZ \\<- rbinom(n,1,pi_x)\nE_XZ \\<- mu_x + Z*tau_x\nsnr \\<- 4\ny \\<- E_XZ + rnorm(n, 0, 1)*(sd(E_XZ)/snr)\nX \\<- as.data.frame(X)\nX$x4 \\<- factor(X$x4, ordered = TRUE)\nX$x5 \\<- factor(X$x5, ordered = TRUE)\ntest_set_pct \\<- 0.2\nn_test \\<- round(test_set_pct*n)\nn_train \\<- n - n_test\ntest_inds \\<- sort(sample(1:n, n_test, replace = FALSE))\ntrain_inds \\<- (1:n)[!((1:n) %in% test_inds)]\nX_test \\<- X[test_inds,]\nX_train \\<- X[train_inds,]\npi_test \\<- pi_x[test_inds]\npi_train \\<- pi_x[train_inds]\nZ_test \\<- Z[test_inds]\nZ_train \\<- Z[train_inds]\ny_test \\<- y[test_inds]\ny_train \\<- y[train_inds]\nmu_test \\<- mu_x[test_inds]\nmu_train \\<- mu_x[train_inds]\ntau_test \\<- tau_x[test_inds]\ntau_train \\<- tau_x[train_inds]\nbcf_model \\<- bcf(X_train = X_train, Z_train = Z_train, y_train = y_train, pi_train = pi_train)\npreds \\<- predict(bcf_model, X_test, Z_test, pi_test)\n# plot(rowMeans(preds$mu_hat), mu_test, xlab = "predicted", ylab = "actual", main = "Prognostic function")\n# abline(0,1,col="red",lty=3,lwd=3)\n# plot(rowMeans(preds$tau_hat), tau_test, xlab = "predicted", ylab = "actual", main = "Treatment effect")\n# abline(0,1,col="red",lty=3,lwd=3)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);