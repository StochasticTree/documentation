"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8617],{1915:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"r-documentation-markdown/CppRNG","title":"CppRNG","description":"Description","source":"@site/docs/r-documentation-markdown/CppRNG.md","sourceDirName":"r-documentation-markdown","slug":"/r-documentation-markdown/CppRNG","permalink":"/documentation/docs/r-documentation-markdown/CppRNG","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/r-documentation-markdown/CppRNG.md","tags":[],"version":"current","frontMatter":{"title":"CppRNG"},"sidebar":"tutorialSidebar","previous":{"title":"CppJson","permalink":"/documentation/docs/r-documentation-markdown/CppJson"},"next":{"title":"ForestDataset","permalink":"/documentation/docs/r-documentation-markdown/ForestDataset"}}');var o=t(4848),s=t(8453);const d={title:"CppRNG"},i="Class that wraps a C++ random number generator (for reproducibility)",a={},c=[{value:"Description",id:"description",level:2},{value:"Public fields",id:"public-fields",level:2},{value:"Methods",id:"methods",level:2},{value:"Public methods",id:"public-methods",level:3},{value:"Method <code>new()</code>",id:"method-new",level:3},{value:"Usage",id:"usage",level:4},{value:"Arguments",id:"arguments",level:4},{value:"Returns",id:"returns",level:4}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"class-that-wraps-a-c-random-number-generator-for-reproducibility",children:"Class that wraps a C++ random number generator (for reproducibility)"})}),"\n",(0,o.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,o.jsxs)(n.p,{children:["Persists a C++ random number generator throughout an R session to\nensure reproducibility from a given random seed. If no seed is provided,\nthe C++ random number generator is initialized using ",(0,o.jsx)(n.code,{children:"std::random_device"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"public-fields",children:"Public fields"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"rng_ptr"}),": External pointer to a C++ std::mt19937 class"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(n.h3,{id:"public-methods",children:"Public methods"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#method-CppRNG-new",children:(0,o.jsx)(n.code,{children:"CppRNG$new()"})})}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"method-new",children:["Method ",(0,o.jsx)(n.code,{children:"new()"})]}),"\n",(0,o.jsx)(n.p,{children:"Create a new CppRNG object."}),"\n",(0,o.jsx)(n.h4,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"CppRNG$new(random_seed = -1)\n"})}),"\n",(0,o.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"random_seed"}),": (Optional) random seed for sampling"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,o.jsxs)(n.p,{children:["A new ",(0,o.jsx)(n.code,{children:"CppRNG"})," object."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>i});var r=t(6540);const o={},s=r.createContext(o);function d(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);